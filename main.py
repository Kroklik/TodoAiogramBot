from aiogram.types import Message, CallbackQuery
from aiogram import Dispatcher, Bot, executor
from aiogram import types
from database import insert_into_table, get_tasks_via_chat_id, get_all_tasks, delete_task_via_chat_id_and_name, \
    mark_as_completed
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import TOKEN
from markups import start_menu, cancel
from functions import is_valid_date, check_text
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
from functions import show_task, show_many_tasks

storage = MemoryStorage()
bot = Bot(TOKEN)

dp = Dispatcher(bot=bot, storage=storage)

scheduler = AsyncIOScheduler()

current_date = datetime.now().strftime('%Y-%m-%d')


class Todo(StatesGroup):
    task_name = State()
    task_desc = State()
    task_start_date = State()
    task_deadline = State()


class TaskDelete(StatesGroup):
    task_name = State()
    confirmation = State()


class TaskUpdate(StatesGroup):
    task_name = State()


# -----------------------------------------------START BOT-------------------------------------------------------------
@dp.message_handler(commands=['start'])
async def start(message: Message):
    chat_id = message.from_user.id
    await bot.send_message(chat_id, 'üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –∑–∞–¥–∞—á–∞–º–∏:',
                           reply_markup=start_menu())


# ----------------------------------------------------------------------------------------------------------------------
# -----------------------------------------------TASK ADDING BLOCK------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------
# -----------------------------------------------HANDLE ADD TASK BTN----------------------------------------------------
@dp.callback_query_handler(lambda c: c.data == 'add_task_btn')
async def add_task_ask_for_name(callback: CallbackQuery):
    chat_id = callback.from_user.id
    await bot.send_message(chat_id, 'üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:', reply_markup=cancel())
    await Todo.task_name.set()
    await callback.answer()


# -----------------------------------------------HANDLE task_name STATE-------------------------------------------------
@dp.message_handler(state=Todo.task_name)
async def confirm_name_ask_desc(message: Message, state: FSMContext):
    chat_id = message.from_user.id
    task_name = message.text
    if check_text(task_name):
        await handle_cancel(message, state)
        return

    existing_tasks = get_tasks_via_chat_id(chat_id)
    for task in existing_tasks:
        if task_name == task[2]:
            await bot.send_message(
                chat_id,
                '‚ùó –ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.'
            )
            await Todo.task_name.set()
            return
    await state.update_data(task_name=task_name)
    await bot.send_message(chat_id, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:', reply_markup=cancel())
    await Todo.task_desc.set()


# -----------------------------------------------HANDLE task_desc STATE-------------------------------------------------
@dp.message_handler(state=Todo.task_desc)
async def confirm_desc_insert_to_db(message: Message, state: FSMContext):
    chat_id = message.from_user.id
    task_desc = message.text
    if check_text(task_desc):
        await handle_cancel(message, state)
        return

    await state.update_data(task_desc=task_desc)
    await bot.send_message(chat_id, 'üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY.MM.DD):', reply_markup=cancel())
    await Todo.task_start_date.set()


# -----------------------------------------------HANDLE task_start_date STATE-------------------------------------------
@dp.message_handler(state=Todo.task_start_date)
async def confirm_start_date_ask_deadline(message: Message, state: FSMContext):
    chat_id = message.from_user.id
    task_start_date = message.text
    if check_text(task_start_date):
        await handle_cancel(message, state)
        return

    is_valid = is_valid_date(task_start_date)
    if not is_valid:
        await bot.send_message(chat_id,
                               'üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY.MM.DD',
                               reply_markup=cancel())
        await Todo.task_start_date.set()
        return
    else:
        await state.update_data(task_start_date=task_start_date)
        await bot.send_message(chat_id,
                               '‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY.MM.DD):',
                               reply_markup=cancel())
        await Todo.task_deadline.set()


# -------------------------------------------HANDLE task_deadline STATE AND SAVE TASK TO DB-----------------------------
@dp.message_handler(state=Todo.task_deadline)
async def confirm_deadline_save_to_db(message: Message, state: FSMContext):
    chat_id = message.from_user.id
    task_deadline = message.text
    if check_text(task_deadline):
        await handle_cancel(message, state)
        return
    is_valid = is_valid_date(task_deadline)
    if not is_valid:
        await bot.send_message(chat_id,
                               'üö´ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY.MM.DD',
                               reply_markup=cancel())
        await Todo.task_deadline.set()
        return
    else:
        await state.update_data(task_deadline=task_deadline)
        data = await state.get_data()
        start_date = data.get('task_start_date')
        deadline = data.get('task_deadline')
        start_date_obj = datetime.strptime(start_date, '%Y.%m.%d')
        task_deadline_obj = datetime.strptime(task_deadline, '%Y.%m.%d')
        if task_deadline_obj < start_date_obj:
            await bot.send_message(
                chat_id,
                'üö´ –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.',
                reply_markup=cancel()
            )
            await Todo.task_deadline.set()
            return
        task_name = data.get('task_name')
        task_desc = data.get('task_desc')
        start_date = start_date.replace('.', '-')
        deadline = deadline.replace('.', '-')
        try:
            insert_into_table(chat_id, task_name, task_desc, start_date, deadline)
            await bot.send_message(chat_id, show_task(get_tasks_via_chat_id(chat_id)[-1]), parse_mode='HTML',
                                   reply_markup=start_menu())
        except Exception as e:
            print(e)
            await bot.send_message(chat_id, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        await state.finish()


# ----------------------------------------------------------------------------------------------------------------------
# -----------------------------------------------TASKS SHOWING BLOCK----------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------
@dp.callback_query_handler(lambda c: c.data == 'show_tasks')
async def show_all_tasks(callback: CallbackQuery):
    chat_id = callback.from_user.id
    await callback.answer()
    await bot.send_message(chat_id, show_many_tasks(get_tasks_via_chat_id(chat_id)), parse_mode='HTML',
                           reply_markup=start_menu())


# ----------------------------------------------------------------------------------------------------------------------
# -----------------------------------------------TASKS DELETING BLOCK---------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------

# -----------------------------------------------DELETE BTN HANDLER-----------------------------------------------------
@dp.callback_query_handler(lambda c: c.data == 'del_task_btn')
async def ask_for_name_to_delete(callback: CallbackQuery):
    chat_id = callback.from_user.id
    await bot.send_message(chat_id, 'üóëÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:')
    await bot.send_message(chat_id, f'üìù –í–æ—Ç –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏: \n{show_many_tasks(get_tasks_via_chat_id(chat_id))}',
                           parse_mode='HTML')
    await TaskDelete.task_name.set()


@dp.message_handler(state=TaskDelete.task_name)
async def confirm_name_ask_confirmation(message: Message, state: FSMContext):
    chat_id = message.from_user.id
    task_name = message.text
    existing_tasks = get_tasks_via_chat_id(chat_id)

    # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    task_found = False

    for task in existing_tasks:
        if task_name == task[2]:
            task_found = True
            await bot.send_message(chat_id,
                                   '‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É? –ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–î–ê", –∏–Ω–∞—á–µ "–ù–ï–¢".')
            await state.update_data(task_name=task_name)
            await TaskDelete.confirmation.set()
            return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞

    # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not task_found:
        await bot.send_message(chat_id, '‚ùå –ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')


@dp.message_handler(state=TaskDelete.confirmation)
async def confirm_deletion(message: Message, state: FSMContext):
    chat_id = message.from_user.id
    confirmation = message.text
    data = await state.get_data()
    task_name = data.get('task_name')
    if confirmation.upper() == '–î–ê':
        delete_task_via_chat_id_and_name(chat_id, task_name)
        await bot.send_message(chat_id, '‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!', reply_markup=start_menu())
    else:
        await bot.send_message(chat_id, 'üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Å –≤ –Ω–∞—á–∞–ª–æ...')
        await start(message)
    await state.finish()


# ----------------------------------------------------------------------------------------------------------------------
# -----------------------------------------------TASKS UPDATING BLOCK---------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------

@dp.callback_query_handler(lambda c: c.data == 'mark_as_completed')
async def ask_for_task_name_to_mark(callback: CallbackQuery):
    chat_id = callback.from_user.id
    await callback.answer()
    await bot.send_message(chat_id, '‚úÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:')
    await bot.send_message(chat_id, f'üìù –í–æ—Ç –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏: \n{show_many_tasks(get_tasks_via_chat_id(chat_id))}',
                           parse_mode='HTML')
    await TaskUpdate.task_name.set()


@dp.message_handler(state=TaskUpdate.task_name)
async def mark_as_completed_func(message: Message, state: FSMContext):
    task_name = message.text
    existing_tasks = get_tasks_via_chat_id(message.from_user.id)
    task_found = False
    for task in existing_tasks:
        if task_name == task[2]:
            task_found = True
            mark_as_completed(chat_id=message.from_user.id, task_name=task_name)
            await bot.send_message(message.from_user.id,
                                   '‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π!', reply_markup=start_menu())
            await state.update_data(task_name=task_name)
            await state.finish()
            return
        if not task_found:
            await bot.send_message(message.from_user.id, '‚ùå –ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')


# ----------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------FUNCTIONS----------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------
@dp.message_handler(regexp='–û—Ç–º–µ–Ω–∞', state='*')
async def handle_cancel(message: Message, state: FSMContext):
    chat_id = message.from_user.id
    await state.finish()
    await bot.send_message(chat_id=chat_id, text='üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Å –Ω–∞–∑–∞–¥...', reply_markup=start_menu())


# ------------------------------------------------------REMINDER---------------------------------------------------------
async def send_reminders():
    print('–ù–∞—á–∞–ª–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è')
    all_tasks = get_all_tasks()
    for task in all_tasks:
        if task[-3] == current_date:
            chat_id = task[1]
            task_name = task[2]
            await bot.send_message(chat_id,
                                   f'üîî –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á—É: "{task_name}" –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É {task[4]}.')


# ------------------------------------------------------AUTO TASKS DELETE-----------------------------------------------
async def tasks_auto_delete():
    current_date = datetime.now().strftime('%Y-%m-%d')
    all_tasks = get_all_tasks()

    for task in all_tasks:
        c_date = datetime.strptime(current_date, '%Y-%m-%d')
        task_deadline = datetime.strptime(task[-2], '%Y-%m-%d')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –¥–µ–¥–ª–∞–π–Ω —É–∂–µ –ø—Ä–æ—à–µ–ª
        if task_deadline < c_date:
            chat_id = task[1]
            task_name = task[2]

            delete_task_via_chat_id_and_name(chat_id, task_name)

            await bot.send_message(chat_id,
                                   f'üóëÔ∏è –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É: {task_name}, —Ç–∞–∫ –∫–∞–∫ –¥–µ–¥–ª–∞–π–Ω —É–∂–µ –ø—Ä–æ—à–µ–ª.')


try:
    print(get_all_tasks()[-1])
except Exception as e:
    print(e)

scheduler.add_job(send_reminders, 'interval', hours=24)
scheduler.add_job(tasks_auto_delete, 'interval', hours=24)
scheduler.start()

executor.start_polling(dp, skip_updates=True)
